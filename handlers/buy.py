from aiogram import Router, types, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN_ID
from utils.logger import log_purchase
from datetime import datetime
from aiogram.filters import Command


router = Router()
user_states = {}  # –°–ª–æ–≤–∞—Ä—å: user_id -> –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —á–µ–∫ –æ–ø–ª–∞—Ç—ã

@router.callback_query(F.data == "buy_vpn")
async def process_buy(callback: CallbackQuery):
    user_states[callback.from_user.id] = "waiting_for_payment"
    await callback.message.answer(
        "üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ 300 —Ä—É–± –ø–æ –Ω–æ–º–µ—Ä—É XXXX XXXX XXXX\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    await callback.answer()

@router.message(F.photo)
async def process_payment_screenshot(msg: Message):
    if user_states.get(msg.from_user.id) == "waiting_for_payment":
        await msg.bot.send_message(
            ADMIN_ID,
            f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç @{msg.from_user.username or msg.from_user.id}.\n"
            f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:"
        )
        await msg.bot.send_photo(ADMIN_ID, msg.photo[-1].file_id)
        await msg.answer("–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        user_states[msg.from_user.id] = "waiting_key"

@router.message(Command("start"))
async def send_key(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        return
    parts = msg.text.strip().split(maxsplit=2)
    if len(parts) < 3:
        await msg.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /–≤—ã–¥–∞—Ç—å @username VPN_KEY")
        return
    username, key = parts[1], parts[2]
    try:
        user = await msg.bot.get_chat(username)
        await msg.bot.send_message(user.id, f"üîë –í–∞—à VPN-–∫–ª—é—á:\n`{key}`", parse_mode="Markdown")
        log_purchase(username)
        await msg.reply("‚úÖ –ö–ª—é—á –≤—ã–¥–∞–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥.")
    except Exception as e:
        await msg.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª—é—á: {e}")
